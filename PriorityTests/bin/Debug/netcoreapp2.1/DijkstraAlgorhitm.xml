<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DijkstraAlgorhitm</name>
    </assembly>
    <members>
        <member name="T:DijkstraAlgorhitm.AdjacencyDictionary">
            <summary>
            mathes every node to adjacent nodes with edges weights to them.
            For example from node U to V1, V2, ..., Vn 
            with edges weights (from U to V1, V2, ..., Vn)
            </summary>
        </member>
        <member name="P:DijkstraAlgorhitm.AdjacencyDictionary.AdjDictionary">
            <summary>
            keys is nodes of graph it mathes to
            values which are lists of all adjacent nodes with weights to them
            </summary>
        </member>
        <member name="M:DijkstraAlgorhitm.AdjacencyDictionary.AddNode(System.String)">
            <summary>
            addition new node to graph
            </summary>
            <param name="name"> of future node </param>
            <returns> new node with name of parameter </returns>
        </member>
        <member name="M:DijkstraAlgorhitm.AdjacencyDictionary.AddEdge(DijkstraAlgorhitm.DijkstraNode,DijkstraAlgorhitm.DijkstraNode,System.Int32)">
            <summary>
            addition edge to source node as pair 
            destination node and weitght to it
            </summary>
            <param name="source"> source node </param>
            <param name="destination"> destination node </param>
            <param name="weight"> weight from source to destination </param>
        </member>
        <member name="M:DijkstraAlgorhitm.AdjacencyDictionary.GetVertices">
            <summary>
            Get vertices of graph
            </summary>
            <returns> all the keys that are the vertices of the graph </returns>
        </member>
        <member name="P:DijkstraAlgorhitm.AdjacencyDictionary.Item(DijkstraAlgorhitm.DijkstraNode)">
            <summary>
            access to AdjacencyDictionary by index
            </summary>
            <param name ="node"> the node the list of which we want to get </param>
            <returns> List of adjacent nodes with edges weights to them </returns>
        </member>
        <member name="T:DijkstraAlgorhitm.DijkstraAlgorhitm">
            <summary>
            Implements Dijkstra shortest paths algorithm
            </summary>
        </member>
        <member name="M:DijkstraAlgorhitm.DijkstraAlgorhitm.Execute(DijkstraAlgorhitm.Graph,DijkstraAlgorhitm.DijkstraNode)">
            <summary>
            Call Dijkstra algorithm
            </summary>
            <param name="graph"> source graph </param>
            <param name="source"> the node 
            from which we look for the shortest paths </param>
            <returns> graph with filled "distances" and "prevs" of every node </returns>
        </member>
        <member name="M:DijkstraAlgorhitm.DijkstraAlgorhitm.Initialize(DijkstraAlgorhitm.Graph,DijkstraAlgorhitm.DijkstraNode,DijkstraAlgorhitm.DijkstraPriorityQueue)">
            <summary>
            Dijkstra initialization 
            </summary>
            <param name="graph"> source graph </param>
            <param name="source"> source node </param>
            <param name="distances"> empty priority queue </param>
        </member>
        <member name="M:DijkstraAlgorhitm.DijkstraAlgorhitm.Relax(DijkstraAlgorhitm.DijkstraNode,DijkstraAlgorhitm.DijkstraNode,System.Int32,DijkstraAlgorhitm.DijkstraPriorityQueue)">
            <summary>
            find shortest distance to vertice v 
            between known distance (v.Distance) 
            and from u across edge (u, v)
            </summary>
            <param name="u"> source node </param>
            <param name="v"> adjacent node </param>
            <param name="weight"> weith of edge between u and v </param>
            <param name="queue"> pririty queue with Dijkstra nodes </param>
        </member>
        <member name="T:DijkstraAlgorhitm.DijkstraNode">
            <summary>
            implements vertice of graph 
            also stores elements of Dijkstra algorithm (distance, prev, index)
            </summary>
        </member>
        <member name="P:DijkstraAlgorhitm.DijkstraNode.Name">
            <summary>
            name of node
            </summary>
        </member>
        <member name="P:DijkstraAlgorhitm.DijkstraNode.Distance">
            <summary>
            distance from source node. 
            int.MaxValue by default
            </summary>
        </member>
        <member name="P:DijkstraAlgorhitm.DijkstraNode.Prev">
            <summary>
            previous node of shortest path
            </summary>
        </member>
        <member name="P:DijkstraAlgorhitm.DijkstraNode.IndexInQueue">
            <summary>
            index in priority queue
            </summary>
        </member>
        <member name="T:DijkstraAlgorhitm.DijkstraPriorityQueue">
            <summary>
            priority queue in which the DijkstraNode is used as a key
            </summary>
        </member>
        <member name="F:DijkstraAlgorhitm.DijkstraPriorityQueue.tree">
            <summary>
            Stores the tree
            </summary>
        </member>
        <member name="P:DijkstraAlgorhitm.DijkstraPriorityQueue.Size">
            <summary>
            Gets the size of priority queue.
            </summary>
            <value>The size.</value>
        </member>
        <member name="M:DijkstraAlgorhitm.DijkstraPriorityQueue.Parent(System.Int32)">
            <summary>
            Get parent of element by index
            </summary>
            <param name="i"></param>
            <returns> returns parent index </returns>
        </member>
        <member name="M:DijkstraAlgorhitm.DijkstraPriorityQueue.LeftChild(System.Int32)">
            <summary>
            returns left child index
            </summary>
        </member>
        <member name="M:DijkstraAlgorhitm.DijkstraPriorityQueue.RightChild(System.Int32)">
            <summary>
            returns right child index
            </summary>
        </member>
        <member name="M:DijkstraAlgorhitm.DijkstraPriorityQueue.Insert(DijkstraAlgorhitm.DijkstraNode,System.Int32)">
            <summary>
            Insert the dijkstra node and priority.
            </summary>
        </member>
        <member name="M:DijkstraAlgorhitm.DijkstraPriorityQueue.ExtractMin">
            <summary>
            Extracts the dijkstra node and its priority.
            </summary>
        </member>
        <member name="M:DijkstraAlgorhitm.DijkstraPriorityQueue.ChangePriority(DijkstraAlgorhitm.DijkstraNode,System.Int32)">
            <summary>
            Changes the priority.
            </summary>
        </member>
        <member name="M:DijkstraAlgorhitm.DijkstraPriorityQueue.Contains(DijkstraAlgorhitm.DijkstraNode)">
            <summary>
            Ð¡hecks for an item in the priority queue.
            </summary>
        </member>
        <member name="M:DijkstraAlgorhitm.DijkstraPriorityQueue.SiftUp(System.Int32)">
            <summary>
            Sifts up the element.
            </summary>
        </member>
        <member name="M:DijkstraAlgorhitm.DijkstraPriorityQueue.SiftDown(System.Int32)">
            <summary>
            Sifts down yhe element.
            </summary>
        </member>
        <member name="M:DijkstraAlgorhitm.DijkstraPriorityQueue.Swap(System.Int32,System.Int32)">
            <summary>
            Swap the 2 dijkstra nodes in queue.
            </summary>
        </member>
        <member name="T:DijkstraAlgorhitm.Graph">
            <summary>
            implements a graph structure as AdjacencyDictionary
            </summary>
        </member>
        <member name="P:DijkstraAlgorhitm.Graph.AdjDict">
            <summary>
            stores nodes of graph and adjacent nodes 
            with edges weights to them
            </summary>
        </member>
        <member name="M:DijkstraAlgorhitm.Graph.AddNode(System.String)">
            <summary>
            add vertice to graph
            </summary>
            <param name="name"> name of future node </param>
            <returns></returns>
        </member>
        <member name="M:DijkstraAlgorhitm.Graph.AddEdge(DijkstraAlgorhitm.DijkstraNode,DijkstraAlgorhitm.DijkstraNode,System.Int32)">
            <summary>
            add edge to graph
            </summary>
            <param name="u"> source node </param>
            <param name="v"> destination node </param>
            <param name="weight"> weight from source to destination </param>
        </member>
        <member name="T:DijkstraAlgorhitm.GraphExtensions">
            <summary>
            Extension methods for Graph class
            </summary>
        </member>
        <member name="M:DijkstraAlgorhitm.GraphExtensions.FindDijkstraShortestPathsFrom(DijkstraAlgorhitm.Graph,DijkstraAlgorhitm.DijkstraNode)">
            <summary>
            simplification: call Dijkstra algorithm from instance of Graph
            </summary>
            <param name="graph"> source graph </param>
            <param name="source"> source node </param>
            <returns> graph with filled "distances" and "prevs" of every node </returns>
        </member>
    </members>
</doc>
